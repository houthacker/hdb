/**
 * Definitions for the source scanner.
 *
 * \since 0.0.1
 * \author houthacker
 */
#ifndef HDB_SCANNER_H
#define HDB_SCANNER_H

/**
 * Defines all token types within hdb-ql
 */
typedef enum {
    TOKEN_DOUBLE_QUOTE, TOKEN_PERCENT, TOKEN_AMPERSAND, TOKEN_BANG, TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
    TOKEN_ASTERISK, TOKEN_PLUS, TOKEN_COMMA, TOKEN_MINUS, TOKEN_PERIOD, TOKEN_BACKSLASH, TOKEN_FORWARD_SLASH,
    TOKEN_COLON, TOKEN_SEMICOLON, TOKEN_LESS_THAN, TOKEN_EQUALS, TOKEN_NOT_EQUAL, TOKEN_LESS_EQUAL, TOKEN_GREATER_EQUAL,
    TOKEN_GREATER_THAN, TOKEN_QUESTION_MARK, TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET, TOKEN_CIRCUMFLEX,
    TOKEN_VERTICAL_BAR, TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE, TOKEN_STRING, TOKEN_IDENTIFIER, TOKEN_ENCLOSED_IDENTIFIER,
    TOKEN_NUMBER,

    TOKEN_ERROR,

    /**
     * Indicates the end of the token list.
     */
    TOKEN_EOF,

    /**
     *  KEYWORDS BELOW
     */
    TOKEN_ABSOLUTE, TOKEN_ACTION, TOKEN_ADD, TOKEN_AFTER, TOKEN_ALL, TOKEN_ALLOCATE, TOKEN_ALTER, TOKEN_AND, TOKEN_ANY, TOKEN_ARE,
    TOKEN_ARRAY, TOKEN_AS, TOKEN_ASC, TOKEN_ASSERTION, TOKEN_AT, TOKEN_AUTHORIZATION,
    TOKEN_BEFORE, TOKEN_BEGIN, TOKEN_BETWEEN, TOKEN_BINARY, TOKEN_BIT, TOKEN_BLOB, TOKEN_BOOLEAN, TOKEN_BOTH,
    TOKEN_BREADTH, TOKEN_BY,
    TOKEN_CALL, TOKEN_CASCADE, TOKEN_CASCADED, TOKEN_CASE, TOKEN_CAST, TOKEN_CATALOG, TOKEN_CHAR, TOKEN_CHARACTER,
    TOKEN_CHECK, TOKEN_CLOB, TOKEN_CLOSE, TOKEN_COLLATE, TOKEN_COLLATION, TOKEN_COLUMN, TOKEN_COMMIT,
    TOKEN_CONDITION, TOKEN_CONNECT, TOKEN_CONNECTION, TOKEN_CONSTRAINT, TOKEN_CONSTRAINTS,
    TOKEN_CONSTRUCTOR, TOKEN_CONTINUE, TOKEN_CORRESPONDING, TOKEN_CREATE, TOKEN_CROSS, TOKEN_CUBE,
    TOKEN_CURRENT, TOKEN_CURRENT_DATE, TOKEN_CURRENT_DEFAULT_TRANSFORM_GROUP,
    TOKEN_CURRENT_TRANSFORM_GROUP_FOR_TYPE, TOKEN_CURRENT_PATH, TOKEN_CURRENT_ROLE,
    TOKEN_CURRENT_TIME, TOKEN_CURRENT_TIMESTAMP, TOKEN_CURRENT_USER, TOKEN_CURSOR, TOKEN_CYCLE,
    TOKEN_DATA, TOKEN_DATE, TOKEN_DAY, TOKEN_DEALLOCATE, TOKEN_DEC, TOKEN_DECIMAL, TOKEN_DECLARE, TOKEN_DEFAULT,
    TOKEN_DEFERRABLE, TOKEN_DEFERRED, TOKEN_DELETE, TOKEN_DEPTH, TOKEN_DEREF, TOKEN_DESC,
    TOKEN_DESCRIBE, TOKEN_DESCRIPTOR, TOKEN_DETERMINISTIC,
    TOKEN_DIAGNOSTICS, TOKEN_DISCONNECT, TOKEN_DISTINCT, TOKEN_DO, TOKEN_DOMAIN, TOKEN_DOUBLE,
    TOKEN_DROP, TOKEN_DYNAMIC,
    TOKEN_EACH, TOKEN_ELSE, TOKEN_ELSEIF, TOKEN_END, TOKEN_END_EXEC, TOKEN_EQUALS_KEYWORD, TOKEN_ESCAPE, TOKEN_EXCEPT,
    TOKEN_EXCEPTION, TOKEN_EXEC, TOKEN_EXECUTE, TOKEN_EXISTS, TOKEN_EXIT, TOKEN_EXTERNAL,
    TOKEN_FALSE, TOKEN_FETCH, TOKEN_FIRST, TOKEN_FLOAT, TOKEN_FOR, TOKEN_FOREIGN, TOKEN_FOUND, TOKEN_FROM, TOKEN_FREE,
    TOKEN_FULL, TOKEN_FUNCTION,
    TOKEN_GENERAL, TOKEN_GET, TOKEN_GLOBAL, TOKEN_GO, TOKEN_GOTO, TOKEN_GRANT, TOKEN_GROUP, TOKEN_GROUPING,
    TOKEN_HANDLE, TOKEN_HAVING, TOKEN_HOLD, TOKEN_HOUR,
    TOKEN_IDENTITY, TOKEN_IF, TOKEN_IMMEDIATE, TOKEN_IN, TOKEN_INDICATOR,
    TOKEN_INITIALLY, TOKEN_INNER, TOKEN_INOUT, TOKEN_INPUT, TOKEN_INSERT, TOKEN_INT, TOKEN_INTEGER,
    TOKEN_INTERSECT, TOKEN_INTERVAL, TOKEN_INTO, TOKEN_IS, TOKEN_ISOLATION,
    TOKEN_JOIN,
    TOKEN_KEY,
    TOKEN_LANGUAGE, TOKEN_LARGE, TOKEN_LAST, TOKEN_LATERAL, TOKEN_LEADING, TOKEN_LEAVE, TOKEN_LEFT,
    TOKEN_LEVEL, TOKEN_LIKE, TOKEN_LOCAL, TOKEN_LOCALTIME, TOKEN_LOCALTIMESTAMP, TOKEN_LOCATOR, TOKEN_LOOP,
    TOKEN_MAP, TOKEN_MATCH, TOKEN_METHOD, TOKEN_MINUTE, TOKEN_MODIFIES, TOKEN_MODULE, TOKEN_MONTH,
    TOKEN_NAMES, TOKEN_NATIONAL, TOKEN_NATURAL, TOKEN_NCHAR, TOKEN_NCLOB, TOKEN_NESTING, TOKEN_NEW, TOKEN_NEXT,
    TOKEN_NO, TOKEN_NONE, TOKEN_NOT, TOKEN_NULL, TOKEN_NUMERIC,
    TOKEN_OBJECT, TOKEN_OF, TOKEN_OLD, TOKEN_ON, TOKEN_ONLY, TOKEN_OPEN, TOKEN_OPTION,
    TOKEN_OR, TOKEN_ORDER, TOKEN_ORDINALITY, TOKEN_OUT, TOKEN_OUTER, TOKEN_OUTPUT, TOKEN_OVERLAPS,
    TOKEN_PAD, TOKEN_PARAMETER, TOKEN_PARTIAL, TOKEN_PATH, TOKEN_PRECISION,
    TOKEN_PREPARE, TOKEN_PRESERVE, TOKEN_PRIMARY, TOKEN_PRIOR, TOKEN_PRIVILEGES, TOKEN_PROCEDURE, TOKEN_PUBLIC,
    TOKEN_READ, TOKEN_READS, TOKEN_REAL, TOKEN_RECURSIVE, TOKEN_REDO, TOKEN_REF, TOKEN_REFERENCES, TOKEN_REFERENCING,
    TOKEN_RELATIVE, TOKEN_RELEASE, TOKEN_REPEAT, TOKEN_RESIGNAL, TOKEN_RESTRICT, TOKEN_RESULT, TOKEN_RETURN,
    TOKEN_RETURNS, TOKEN_REVOKE, TOKEN_RIGHT, TOKEN_ROLE, TOKEN_ROLLBACK, TOKEN_ROLLUP, TOKEN_ROUTINE,
    TOKEN_ROW, TOKEN_ROWS,
    TOKEN_SAVEPOINT, TOKEN_SCHEMA, TOKEN_SCROLL, TOKEN_SEARCH, TOKEN_SECOND, TOKEN_SECTION, TOKEN_SELECT,
    TOKEN_SESSION, TOKEN_SESSION_USER, TOKEN_SET, TOKEN_SETS, TOKEN_SIGNAL, TOKEN_SIMILAR, TOKEN_SIZE,
    TOKEN_SMALLINT, TOKEN_SOME, TOKEN_SPACE, TOKEN_SPECIFIC, TOKEN_SPECIFICTYPE, TOKEN_SQL, TOKEN_SQLEXCEPTION,
    TOKEN_SQLSTATE, TOKEN_SQLWARNING, TOKEN_START, TOKEN_STATE, TOKEN_STATIC, TOKEN_SYSTEM_USER,
    TOKEN_TABLE, TOKEN_TEMPORARY, TOKEN_THEN, TOKEN_TIME, TOKEN_TIMESTAMP,
    TOKEN_TIMEZONE_HOUR, TOKEN_TIMEZONE_MINUTE, TOKEN_TO, TOKEN_TRAILING, TOKEN_TRANSACTION,
    TOKEN_TRANSLATION, TOKEN_TREAT, TOKEN_TRIGGER, TOKEN_TRUE,
    TOKEN_UNDER, TOKEN_UNDO, TOKEN_UNION, TOKEN_UNIQUE, TOKEN_UNKNOWN, TOKEN_UNNEST, TOKEN_UNTIL, TOKEN_UPDATE,
    TOKEN_USAGE, TOKEN_USER, TOKEN_USING,
    TOKEN_VALUE, TOKEN_VALUES, TOKEN_VARCHAR, TOKEN_VARYING, TOKEN_VIEW,
    TOKEN_WHEN, TOKEN_WHENEVER, TOKEN_WHERE, TOKEN_WHILE, TOKEN_WITH, TOKEN_WITHOUT, TOKEN_WORK, TOKEN_WRITE,
    TOKEN_YEAR,
    TOKEN_ZONE,
} hdb_token_type_t;

/**
 * Defines a token the scanner yields while scanning.
 */
typedef struct {

    /**
     * The type of the token.
     */
    hdb_token_type_t type;

    /**
     * The starting point within the source string.
     */
    const char* start;

    /**
     * The length of the token value.
     */
    int32_t length;

    /**
     * The source code line this token resides on.
     */
    int32_t line;
} hdb_token_t;

void hdb_scanner_create(void);

void hdb_scanner_init(const char* source);

void hdb_scanner_free(void);

/**
 * Scans the next token from the source string.
 *
 * \return The next token.
 */
hdb_token_t hdb_scanner_scan_token(void);

#endif //HDB_SCANNER_H
